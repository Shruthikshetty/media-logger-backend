@baseUrl = http://localhost:3001
@authToken = Bearer <token>
##-------------------------------------------- USER -------------------------------------------------------------
### add user
POST {{baseUrl}}/api/user
Content-Type: application/json

{
  "name": "don",
  "email": "don@gmail.com",
  "password": "don"
}

### get all users 
GET {{baseUrl}}/api/user/all
Authorization: {{authToken}}

### get all users  with pagination  (min = 0 , max = 100)
GET {{baseUrl}}/api/user/all?start=0&limit=10
Authorization: {{authToken}}

### get all users page based
GET {{baseUrl}}/api/user/all?page=1&limit=10
Authorization: {{authToken}}

### get logged in user details 
GET {{baseUrl}}/api/user
Authorization: {{authToken}}

### delete logged in user 
DELETE {{baseUrl}}/api/user
Authorization: {{authToken}}

### delete user by id 
DELETE {{baseUrl}}/api/user/6873c1a2a4482d1815c78ac2
Authorization: {{authToken}}

### update a user details 
PATCH {{baseUrl}}/api/user
Authorization: {{authToken}}
Content-Type: application/json

{
  "name":"jonny",
  "password":"jonny"
}

### update user role by id 
PUT  {{baseUrl}}/api/user/role/6873f16d247f3a1d7ddf15e6
Authorization: {{authToken}}
Content-Type: application/json

{
  "role":"user"
}



##------------------------------------------- AUTH --------------------------------------------------------------
###login user 
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "doom@gmail.com",
  "password": "jonny"
}

## ------------------------------------------ MOVIES -------------------------------------------------------------

### get all movies default (20 movies at a time) max is 50
GET {{baseUrl}}/api/movie

### get all movies by pagination (page)
GET {{baseUrl}}/api/movie?limit=20&page=1

### get all movies by pagination (start , limit)
GET {{baseUrl}}/api/movie?limit=20&start=0

### get Movie by id
GET {{baseUrl}}/api/movie/6877504915e1dac22aff59d7

### add a movie 
POST {{baseUrl}}/api/movie
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Journey to Self",
  "description": "A young protagonist's path to maturity in a changing world.",
  "averageRating": 8.2,
  "cast": ["Youth Protagonist", "Mentor Figure"],
  "directors": ["Growth Storyteller"],
  "runTime": 105,
  "languages": ["english", "hindi"],
  "backdropUrl": "https://example.com/backdrops/journey-to-self.jpg",
  "isActive": true,
  "tags": ["Coming of Age", "Character-driven", "Feel-Good"],
  "ageRating": 12,
  "trailerYoutubeUrl": "https://youtube.com/watch?v=journey-trailer",
  "releaseDate": "2025-05-01T00:00:00.000Z"
}

### delete movie by id 
DELETE {{baseUrl}}/api/movie/68775607854576d14ca6a8de
Authorization: {{authToken}}

### update movie by id 
PATCH {{baseUrl}}/api/movie/68846ce94f03fdce95913727
Authorization: {{authToken}}
Content-Type: application/json

{
  "averageRating": 8.2
}

### bulk delete movies 
DELETE {{baseUrl}}/api/movie/bulk
Authorization: {{authToken}}
Content-Type: application/json

{
  "movieIds" : ["687cfd05ac47aec79e8964cc" , "687cfd48ac47aec79e8964d1" , "687cfd82ac47aec79e8964d6"]
}

### bulk add movie
### use post man to do this file key movieDataFile
POST {{baseUrl}}/api/movie/bulk

### search movies by title (there are default limits applied like prev endpoints)
GET {{baseUrl}}/api/movie/search?text=Dark Knight

### search movies by title  with pagination
GET {{baseUrl}}/api/movie/search?text=Dark Knight&limit=20&start=0

### get movies by filter (default pagination 20 at a time only page based pagination here )
### all the fields are optional here , additional field means additional checks
GET {{baseUrl}}/api/movie/filter
Content-Type: application/json

{
  "languages" : "english",
  "status" : "released",
  "genre": ["Action"],
  "tags": ["Binge-worthy" , "Serialized"],
  "averageRating": 5,
  "ageRating":{
    "gte": 12,
    "lte": 18
  },
  "runTime": {
    "gte":90,
    "lte":120
  },
  "releaseDate":{
    "gte":"2024-05-20T00:00:00.000Z",
    "lte":"2024-07-20T00:00:00.000Z"
  }
}

### filters with limits (page based)
GET {{baseUrl}}/api/movie/filter
Content-Type: application/json

{
  "languages" : "english",
  "limit": 2,
  "page": 1
}

##----------------------------------------------------GAMES----------------------------------------------------

### Add a new game 
POST {{baseUrl}}/api/game
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Apex Legends Season 20",
  "description": "Squad up and drop into the arena in this free-to-play battle royale where legendary characters fight for glory",
  "genre": ["Battle Royale"],
  "releaseDate": "2024-02-13T00:00:00.000Z",
  "posterUrl": "https://example.com/apex-poster.jpg",
  "backdropUrl": "https://example.com/apex-backdrop.jpg",
  "isActive": true,
  "status": "released",
  "platforms": ["PC", "PlayStation 5", "PlayStation 4", "Xbox Series X", "Xbox One", "Nintendo Switch"],
  "avgPlaytime": 100,
  "developer": "Respawn Entertainment",
  "ageRating": 16,
  "trailerYoutubeUrl": "https://www.youtube.com/watch?v=example6"
}

### Bulk add games by sending a json file 
### use postman to do this file key gameDataFile
POST {{baseUrl}}/api/game/bulk

### get all games(20 games at a time) max is 50
GET {{baseUrl}}/api/game

### get all games by pagination (page)
GET {{baseUrl}}/api/game?limit=20&page=1

### get all games by pagination (start , limit)
GET {{baseUrl}}/api/game?limit=20&start=0

### get a game by id 
GET {{baseUrl}}/api/game/6884ebdc9c0f28bdf8671744

### search games by title (default limits 20 at time  , start , limit based for infinite scroll)
GET {{baseUrl}}/api/game/search?text=Kingdom

### get games by filter  (default limit is 20 per page)
POST {{baseUrl}}/api/game/filter
Content-Type: application/json

{
 "platforms":["PlayStation 4"],
 "genre": ["Battle Royale"],
 "status": "released",
 "avgPlaytime":{
  "gte":100,
  "lte":200
 },
 "averageRating": 5,
 "releaseDate" : {
  "gte": "2024-01-13T00:00:00.000Z",
  "lte": "2024-07-13T00:00:00.000Z"
 },
 "ageRating":{
  "gte": 12,
  "lte": 18
 }
}

### get games with pagination 
POST {{baseUrl}}/api/game/filter
Content-Type: application/json

{
   "status": "released",
   "page": 1,
   "limit": 20
}

### delete a game buy id 
DELETE {{baseUrl}}/api/game/6877c2ff3f23959890faae31
Authorization: {{authToken}}

### bulk delete games by id
DELETE {{baseUrl}}/api/game/bulk
Authorization: {{authToken}}
Content-Type: application/json

{
  "gameIds" : [
    "6884ebdc9c0f28bdf8671744"
  ]
}

### update a game by id 
PATCH {{baseUrl}}/api/game/6884e94dc7634cdb9188e6c1
Authorization: {{authToken}}
Content-Type: application/json

{
  "averageRating": 8.5
}

##-------------------------------------------------TV-SHOW-----------------------------------------------------------

### get all the tv shows (default 20 records at a time)
GET {{baseUrl}}/api/tv-show

### get tv shows page based pagination 
GET {{baseUrl}}/api/tv-show?limit=2&page=1

### get tv shows limit , start  based pagination 
GET {{baseUrl}}/api/tv-show?limit=2&start=0

### get full details with episodes and seasons 
GET {{baseUrl}}/api/tv-show?limit=2&page=1&fullDetails=true

### get tv-show by id
GET {{baseUrl}}/api/tv-show/68791c6b786a8844dec84b02

### get tv show by search title (pagination default limit = 20)
GET {{baseUrl}}/api/tv-show/search?text=Fleabag
###
GET {{baseUrl}}/api/tv-show/search?text=Fleabag&limit=1&start=0

### get tv show by filter (page based pagination , default 20 per page )
POST {{baseUrl}}/api/tv-show/filter
Content-Type: application/json

{
  "genre": ["Comedy"],
  "languages": ["English"],
  "tags": ["Award-winning"],
  "status": "released",
  "averageRating": 8,
  "releaseDate":{
    "gte": "2016-01-13T00:00:00.000Z",
    "lte": "2017-01-13T00:00:00.000Z"
  },
  "runTime":{
    "gte": 200,
    "lte": 300
  },
  "totalEpisodes":{
    "gte": 5,
    "lte": 16
  },
    "totalSeasons":{
    "gte": 1,
    "lte": 3
  },
  "page": 1,
  "limit": 20
}

### add a new tv show (this can add all all tv show , seasons , episodes)
POST {{baseUrl}}/api/tv-show
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Fleabag small bug",
  "description": "A dry-witted woman, known only as Fleabag, navigates life and love in London while trying to cope with tragedy.",
  "averageRating": 8.7,
  "genre": ["Comedy", "Action"],
  "releaseDate": "2016-01-13T00:00:00.000Z",
  "cast": ["Phoebe Waller-Bridge", "Sian Clifford", "Olivia Colman"],
  "directors": ["Harry Bradbeer"],
  "runTime": 230,
  "languages": ["English"],
  "posterUrl": "https://m.media-amazon.com/images/M/MV5BMjA4ODU3OTEzMl5BMl5BanBnXkFtZTgwMjc4NzA4OTE@._V1_QL75_UX380_CR0,0,380,562_.jpg",
  "backdropUrl": "https://www.themoviedb.org/t/p/original/4FV98Rj42n22I5OQ6dM2p12lT1z.jpg",
  "isActive": true,
  "status": "released",
  "tags": ["Award-winning", "Character-driven", "Dialogue-heavy", "Satirical"],
  "totalSeasons": 2,
  "totalEpisodes": 12,
  "ageRating": 16,
  "seasons": [
    {
      "seasonNumber": 1,
      "title": "Season 1",
      "description": "Fleabag navigates the minefield of her family and dating life while dealing with the recent death of her best friend.",
      "releaseDate": "2016-07-21",
      "noOfEpisodes": 6,
      "posterUrl": "https://www.themoviedb.org/t/p/w220_and_h330_face/ohh0255e0x9a8y6eSyrDLi2hM96.jpg",
      "seasonRating": 8.5,
      "status": "ended",
      "trailerYoutubeUrl": "https://www.youtube.com/watch?v=I5Uv6cb9YRs",
      "episodes": [
        {
          "title": "Episode 1",
          "description": "Fleabag tries to navigate a tricky family lunch and a one-night stand.",
          "episodeNumber": 1,
          "runTime": 27
        },
        {
          "title": "Episode 2",
          "description": "With the cafe struggling, Fleabag asks her sister for money, which results in a cringeworthy encounter with her brother-in-law.",
          "episodeNumber": 2,
          "runTime": 26
        }
      ]
    }
  ]
}

### update a tv show details (only meta data can be updated )
PATCH {{baseUrl}}/api/tv-show/68791c6b786a8844dec84b02
Authorization: {{authToken}}
Content-Type: application/json

{
  "description": "A dry-witted woman, known only as Fleabag, navigates life and love in London while trying to cope with tragedy."
}

### delete a tv show (this will remove all the associated seasons and episodes)
DELETE  {{baseUrl}}/api/tv-show/688658dbbe58cf4bf7ade6ce
Authorization: {{authToken}}

### bulk delete tv show
DELETE  {{baseUrl}}/api/tv-show/bulk
Authorization: {{authToken}}
Content-Type: application/json

{
 "tvShowIds":["68865a1dfecd566edb52c098" , "68865a29fecd566edb52c0a1" , "68865a34fecd566edb52c0aa"]
}

### add a season to a tv show (you can provide the episodes as well)
POST {{baseUrl}}/api/tv-show/season
Authorization: {{authToken}}
Content-Type: application/json

{
  "tvShow": "687b38b2fda2a91d0f01d59a",
  "seasonNumber": 1,
  "title": "Season 1",
  "description": "The first season of The Startup.",
  "releaseDate": "2023-09-10",
  "noOfEpisodes": 2,
  "posterUrl": "https://example.com/posters/startup-s1.jpg",
  "seasonRating": 7.8,
  "status": "ended",
  "trailerYoutubeUrl": "https://www.youtube.com/watch?v=example",
  "episodes": [
    {
      "title": "Launch Day",
      "description": "The team scrambles to fix bugs before their big product launch.",
      "episodeNumber": 1,
      "releaseDate": "2023-09-10",
      "runTime": 30
    },
    {
      "title": "First Customer",
      "description": "The startup gets its first customer, but things don't go as planned.",
      "episodeNumber": 2,
      "releaseDate": "2023-09-17",
      "runTime": 32
    }
  ]
}

### add a episode to a season 
POST {{baseUrl}}/api/tv-show/episode
Authorization: {{authToken}}
Content-Type: application/json

{
  "season": "687b48f792163a363d52d841",
  "title": "The Launch",
  "description": "The team prepares for the big product launch.",
  "episodeNumber": 1,
  "releaseDate": "2023-09-10",
  "runTime": 30
}

### get episode by id 
GET {{baseUrl}}/api/tv-show/episode/68791c6b786a8844dec84b06

### get episode by id with full details (show and season details)
GET {{baseUrl}}/api/tv-show/episode/68791c6b786a8844dec84b06?fullDetails=true

### delete a episode by id 
DELETE {{baseUrl}}/api/tv-show/episode/68791c6c786a8844dec84b08
Authorization: {{authToken}}

### update a episode by id 
PATCH {{baseUrl}}/api/tv-show/episode/68791c6b786a8844dec84b06
Authorization: {{authToken}}
Content-Type: application/json

{
   "description": "A young woman discovers the library's for the first time."
}

### get season by id 
GET {{baseUrl}}/api/tv-show/season/687b38b2fda2a91d0f01d59c

### get season by id with episode details 
GET {{baseUrl}}/api/tv-show/season/687b38b2fda2a91d0f01d59c?fullDetails=true

### update a season by id 
PATCH {{baseUrl}}/api/tv-show/season/687b38b2fda2a91d0f01d59c
Authorization: {{authToken}}
Content-Type: application/json

{
  "description" : "updated title"
}

### delete the season by id (all the associated episodes will also be deleted)
DELETE {{baseUrl}}/api/tv-show/season/688650616452857ec142d164
Authorization: {{authToken}}
