#
# This file contains all the schemas and req and response bodies for user
#

components:
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        _id:
          type: string
          format: objectId
          description: Unique user identifier
          example: '64f7c8b9a1b2c3d4e5f67890'
        name:
          type: string
          description: User’s display name
          example: 'media_enthusiast'
        email:
          type: string
          format: email
          description: User’s email address
          example: 'user@example.com'
        password:
          type: string
          writeOnly: true
          description: Hashed password
        profileImg:
          type: string
          format: uri
          description: URL to profile image
          example: 'https://example.com/avatar.jpg'
        role:
          type: string
          enum:
            - user
            - admin
          description: User’s role
          example: 'user'
        xp:
          type: number
          description: Experience points
          example: 120
        location:
          type: string
          description: User’s location
          example: 'San Francisco, CA'
        bio:
          type: string
          description: User biography
          example: 'Movie buff and gamer.'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

  requestBodies:
    AddUserRequest:
      description: Request body for adding a new user
      required:
        - name
        - email
        - password
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 3
                maxLength: 50
                example: 'media_enthusiast'
              email:
                type: string
                format: email
                example: 'newuser@example.com'
              password:
                type: string
                example: 'SecurePass123!'
              bio:
                type: string
                maxLength: 200
                example: 'Avid TV show fan.'
              location:
                type: string
                minLength: 3
                maxLength: 50
                example: 'New York'
              profileImg:
                type: string
                format: uri
                example: 'https://example.com/profile.png'
              xp:
                type: number
                example: 0
    UpdateUserRequest:
      description: request body for updating a user. At least one field must be provided
      type: object
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 3
                maxLength: 50
              email:
                type: string
                format: email
              password:
                type: string
              bio:
                type: string
                maxLength: 200
              location:
                type: string
                minLength: 3
                maxLength: 50
              profileImg:
                type: string
                format: uri
              xp:
                type: number
    UpdateRoleRequest:
      description: request body for updating user role
      type: object
      content:
        application/json:
          schema:
            type: object
            required:
              - role
            properties:
              role:
                type: string
                enum:
                  - user
                  - admin
  responses:
    AddUserSuccessResponse:
      description: Added user is returned
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/components/schemas/User'
    GetAllUsersSuccessResponse:
      description: All users are returned
      content:
        application/json:
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              pagination:
                $ref: '#/components/schemas/pagination'
    GetUserDetailSuccessResponse:
      description: User details are returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    DeleteUserSuccessResponse:
      description: User is deleted
      content:
        application/json:
          schema:
            type: object
            required:
              - success
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/components/schemas/User'
              message:
                type: string
                example: 'User deleted successfully'
    UpdateUserSuccessResponse:
      description: Updated user is returned
      content:
        application/json:
          schema:
            type: object
            required:
              - success
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/components/schemas/User'
              message:
                type: string
                example: 'User updated successfully'
